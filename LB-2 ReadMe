### 1. **Різниця між ключовими та зарезервованими словами**
   - **Ключові слова** — це слова, які мають спеціальне значення в мові програмування (наприклад, `int`, `class`, `if`). Вони використовуються для створення змінних, методів, умов тощо.
   - **Зарезервовані слова** — це слова, які зарезервовані для майбутнього використання або не можуть бути використані як імена змінних, навіть якщо не мають поточного функціоналу. Наприклад, `goto` у Java.

---

### 2. **Примітивні типи даних**
   - **byte** (8 біт):  
     Використовується для зберігання невеликих чисел, наприклад, вік людини (0–127 років).  
   - **short** (16 біт):  
     Ефективно для значень, таких як кількість днів у році (0–365).  
   - **int** (32 біти):  
     Для обчислення балансу банківського рахунку або рахунку в грі.  
   - **long** (64 біти):  
     Використовується для великих чисел, наприклад, кількість зірок у галактиці.  
   - **float** (32 біти, число з рухомою комою):  
     Для чисел із дробами, наприклад, середня температура за добу.  
   - **double** (64 біти, число з рухомою комою):  
     Для точних значень, таких як маса атома.  
   - **char** (16 біт):  
     Для зберігання символів, наприклад, символу валюти ($).  
   - **boolean** (1 біт):  
     Для значень істинності, наприклад, чи включено пристрій.

---

### 3. **Знакові та беззнакові типи**
   - **Знакові** типи можуть бути додатними або від'ємними (наприклад, `byte`, `int`, `long`).  
   - **Беззнакові** типи тільки додатні (наприклад, `char` у Java).  
     Примітивні типи Java: всі числові типи знакові, крім `char`.

---

### 4. **Максимальне значення для типів**:
   - `short`: \( 32,767 \)  
   - `char`: \( 65,535 \)  
   - `int`: \( 2,147,483,647 \)  
   - `long`: \( 9,223,372,036,854,775,807 \)

---

### 5. **Діапазон типу `byte`**
   - `byte` має 8 біт: \( 2^8 = 256 \) можливих значень. Половина використовується для від'ємних чисел (включаючи 0), тому \( -128..127 \).
   - Від’ємних значень більше, тому що 0 враховується лише серед додатних.

---

### 6. **Система числення**
   Система числення — це спосіб представлення чисел (десяткова, двійкова, шістнадцяткова).  
   Перетворення: ділимо число на базу, записуємо залишки, читаємо з кінця.

---

### 7. **Доповняльний код**
   - Це спосіб представлення від'ємних чисел у двійковій системі.  
   - Доповняльний код отримується інвертуванням усіх бітів числа і додаванням 1.

---

### 8. **Результат роботи коду**
   ```java
   int a = 2_000_000_000;
   int b = 2_000_000_000;
   int c = a + b;
   System.out.println(c); // Результат: -294,967,296
   ```
   **Причина**: переповнення типу `int`.

---

### 9. **Різниця між `float` і `double`**
   - `float` (32 біти) менш точний, але швидший.  
   - `double` (64 біти) забезпечує більшу точність.

---

### 10. **Число з рухомою комою**
   - Це число у форматі:  
     \( \text{Знак} \times \text{Мантиса} \times 2^{\text{Степінь}} \).  
   - **Мантиса** — це значущі цифри.  
   - **Степінь** — масштаб числа.

---

### 11. **Double.NaN**
   - `NaN` (Not-a-Number) — результат некоректних операцій (наприклад, 0/0).

---

### 12. **Результат коду**
   ```java
   System.out.println(Double.NaN == Double.NaN); // false
   ```
   **Причина**: за стандартом IEEE, `NaN` не дорівнює нічому, навіть собі.

---

### 13. **Різниця між преінкрементом та постінкрементом**
   - **Преінкремент** (`++a`): спочатку збільшує, потім використовує.  
   - **Постінкремент** (`a++`): спочатку використовує, потім збільшує.  

---

### 14. **Різниця між логічним та побітовим AND**
   - Логічний AND (`&&`): працює з логічними значеннями.  
   - Побітовий AND (`&`): працює з кожним бітом окремо.

---

### 15. **Різниця між OR та XOR**
   - OR (`|`): якщо хоча б один операнд true, результат true.  
   - XOR (`^`): true тільки якщо операнди різні.

---

### 16. **Результат коду**
   ```java
   boolean a = true && false | false; // false
   System.out.println(a = false);    // false
   
   boolean b = true && false || false; // false
   System.out.println(b = true);      // true
   ```
   **Причина**:  
   - Вирази оцінюються з урахуванням пріоритетів операторів.  
   - Логічні оператори змінюють значення змінної.
